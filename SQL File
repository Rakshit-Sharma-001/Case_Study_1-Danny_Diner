-- Schema created in MySQL Workbench
create schema dannys_diner;
use dannys_diner;

-- All 3 Tables created 
CREATE TABLE members (
    customer_id CHAR(2) NOT NULL PRIMARY KEY,
    join_date DATE );
    
CREATE TABLE menu (
    product_id INT NOT NULL PRIMARY KEY,
    product_name VARCHAR(20) NOT NULL,
    price INT NOT NULL );
    
CREATE TABLE sales (
    customer_id CHAR(2) NOT NULL,
    order_date DATE,
    product_id INT NOT NULL,
    FOREIGN KEY (customer_id)
        REFERENCES members (customer_id),
    FOREIGN KEY (product_id)
        REFERENCES menu (product_id) );

-- Data inserted into all tables
INSERT INTO members (customer_id, join_date) VALUES ('A', '2021-01-07'), ('B', '2021-01-09'), ('C', '2021-01-11');

INSERT INTO menu (product_id, product_name, price) VALUES ('1', 'sushi', '10'), ('2', 'curry', '15'), ('3', 'ramen', '12');

INSERT INTO sales (customer_id, order_date, product_id) VALUES ('A', '2021-01-01', '1'), ('A', '2021-01-01', '2'), 
('A', '2021-01-07', '2'), ('A', '2021-01-10', '3'), ('A', '2021-01-11', '3'), ('A', '2021-01-11', '3'), ('B', '2021-01-01', '2'), 
('B', '2021-01-02', '2'), ('B', '2021-01-04', '1'), ('B', '2021-01-11', '1'), ('B', '2021-01-16', '3'), ('B', '2021-02-01', '3'),
('C', '2021-01-01', '3'), ('C', '2021-01-01', '3'),  ('C', '2021-01-07', '3');

-- Select statements to check whether data is correctly inserted or not !! It is always necessary to check before start writing the queries.
    
SELECT * FROM members;
SELECT * FROM menu;
SELECT * FROM sales;


-- Q1: What is the total amount each customer spent at the restaurant?

SELECT customer_id, SUM(price) AS 'Total_Amount_Spent' FROM sales S
JOIN menu M ON S.product_id = M.product_id GROUP BY customer_id;

-- Q2: How many days has each customer visited the restaurant?

SELECT customer_id, COUNT(order_date) AS 'Total_Days_Visited' FROM sales 
GROUP BY customer_id;

-- q3: What was the first item from the menu purchased by each customer?

SELECT customer_id, product_name FROM sales S JOIN menu M 
ON S.product_id = M.product_id WHERE order_date IN 
(SELECT MIN(order_date) FROM sales GROUP BY customer_id);

-- q4: What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT product_name, COUNT(*) AS 'Total_purchases' FROM sales S JOIN menu M
ON S.product_id = M.product_id
GROUP BY S.product_id ORDER BY Total_Purchases DESC LIMIT 1;

-- q5: Which item was the most popular for each customer?

select customer_id, product_name, item_bought_count from 
(select customer_id, product_name, count(S.product_id) as 'item_bought_count',dense_rank() over(partition by customer_id 
order by count(sales.product_id) desc) as cte 
from sales S join menu M on S.product_id = M.product_id 
group by customer_id, S.product_id ) as subquery where cte =1;

-- q6: Which item was purchased first by the customer after they became a member?

select customer_id, product_name from (select row_number() over
( partition by S.customer_id order by order_date) as cte, 
S.customer_id, order_date, join_date, product_name from sales S
join menu M on S.product_id = M.product_id 
join members MM  on MM.customer_id = S.customer_id 
where order_date >= join_date) as subquery where cte =1 ;

-- q7: Which item was purchased just before the customer became a member? 

select customer_id, product_name from( select row_number() over
(partition by S.customer_id order by order_date) as cte, 
S.customer_id, order_date, join_date, product_name from sales S
join menu M on S.product_id = M.product_id 
join members MM on MM.customer_id = S.customer_id 
where order_date <= join_date) as subquery where cte = 1 ;

-- q8: What is the total items and amount spent for each member before they became a member?

SELECT MM.customer_id, COUNT(DISTINCT M.product_id) 
AS 'Items_ordered', SUM(price) AS 'Money_spent' FROM members MM
JOIN sales S ON MM.customer_id = S.customer_id 
JOIN menu M ON M.product_id = S.product_id
WHERE order_date < join_date GROUP BY customer_id;

-- q9: If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

SELECT customer_id, SUM (CASE WHEN product_name = 'sushi' THEN 20 * price 
ELSE 10 * price END) AS money_spent
FROM sales S JOIN menu M ON S.product_id = M.product_id 
GROUP BY customer_id ORDER BY customer_id;

-- q10: In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

WITH dates AS ( SELECT *, adddate(join_date, interval 7 day) as valid_date, 
'2021-01-31' AS last_date FROM members)
Select S.Customer_id, SUM( Case When M.product_ID = 1 THEN M.price*20 
When S.order_date between D.join_date and D.valid_date Then M.price*20
Else M.price*10 END ) as Points From Dates D 
join Sales S On D.customer_id = S.customer_id
Join Menu M On M.product_id = S.product_id 
Where S.order_date < D.last_date Group by S.customer_id;

-- Bonus_Table_1

SELECT S.customer_id, order_date, product_name, price, 
CASE WHEN order_Date < join_date THEN 'N' ELSE 'Y' END AS member 
FROM sales s
JOIN menu m ON s.product_id = m.product_id 
JOIN members mm ON mm.customer_id = s.customer_id 
ORDER BY s.customer_id , order_date;

-- Bonus_Table_2

with cte as (select s.customer_id, order_date, product_name, price, 
case when order_Date < join_date then 'N' else 'Y' end  as member
from sales s 
join menu m on s.product_id = m.product_id 
join members mm on mm.customer_id= s.customer_id 
order by s.customer_id, order_date)
select *, case when member = 'N' then null 
else rank() over(partition by s.customer_id, member 
order by order_date) end as ranking from cte;
